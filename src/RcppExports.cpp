// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MAX_MIN_rcpp
NumericMatrix MAX_MIN_rcpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _NRCPP_MAX_MIN_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MAX_MIN_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// cBIND_rcpp
RObject cBIND_rcpp(RObject A, NumericVector vect);
RcppExport SEXP _NRCPP_cBIND_rcpp(SEXP ASEXP, SEXP vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vect(vectSEXP);
    rcpp_result_gen = Rcpp::wrap(cBIND_rcpp(A, vect));
    return rcpp_result_gen;
END_RCPP
}
// multiMATRIZ_rcpp
NumericMatrix multiMATRIZ_rcpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _NRCPP_multiMATRIZ_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(multiMATRIZ_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rBIND_rcpp
RObject rBIND_rcpp(RObject A, NumericVector vect);
RcppExport SEXP _NRCPP_rBIND_rcpp(SEXP ASEXP, SEXP vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vect(vectSEXP);
    rcpp_result_gen = Rcpp::wrap(rBIND_rcpp(A, vect));
    return rcpp_result_gen;
END_RCPP
}
// whichMAX_rcpp
DataFrame whichMAX_rcpp(RObject x);
RcppExport SEXP _NRCPP_whichMAX_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMAX_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// whichMIN_rcpp
RObject whichMIN_rcpp(RObject x);
RcppExport SEXP _NRCPP_whichMIN_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMIN_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NRCPP_MAX_MIN_rcpp", (DL_FUNC) &_NRCPP_MAX_MIN_rcpp, 2},
    {"_NRCPP_cBIND_rcpp", (DL_FUNC) &_NRCPP_cBIND_rcpp, 2},
    {"_NRCPP_multiMATRIZ_rcpp", (DL_FUNC) &_NRCPP_multiMATRIZ_rcpp, 2},
    {"_NRCPP_rBIND_rcpp", (DL_FUNC) &_NRCPP_rBIND_rcpp, 2},
    {"_NRCPP_whichMAX_rcpp", (DL_FUNC) &_NRCPP_whichMAX_rcpp, 1},
    {"_NRCPP_whichMIN_rcpp", (DL_FUNC) &_NRCPP_whichMIN_rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_NRCPP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
